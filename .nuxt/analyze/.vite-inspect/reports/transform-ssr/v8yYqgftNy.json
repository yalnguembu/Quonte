{
  "resolvedId": "/home/yalnguembu/Perso/quonte/node_modules/@nuxtjs/i18n/dist/runtime/messages.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { deepCopy, isFunction, isArray, isObject, isString } from \"@intlify/shared\";\nconst cacheMessages = /* @__PURE__ */ new Map();\nexport async function loadVueI18nOptions(vueI18nConfigs, nuxt) {\n  const vueI18nOptions = { messages: {} };\n  for (const configFile of vueI18nConfigs) {\n    const { default: resolver } = await configFile();\n    const resolved = typeof resolver === \"function\" ? await nuxt.runWithContext(async () => await resolver()) : resolver;\n    deepCopy(resolved, vueI18nOptions);\n  }\n  return vueI18nOptions;\n}\nexport function makeFallbackLocaleCodes(fallback, locales) {\n  let fallbackLocales = [];\n  if (isArray(fallback)) {\n    fallbackLocales = fallback;\n  } else if (isObject(fallback)) {\n    const targets = [...locales, \"default\"];\n    for (const locale of targets) {\n      if (fallback[locale]) {\n        fallbackLocales = [...fallbackLocales, ...fallback[locale].filter(Boolean)];\n      }\n    }\n  } else if (isString(fallback) && locales.every((locale) => locale !== fallback)) {\n    fallbackLocales.push(fallback);\n  }\n  return fallbackLocales;\n}\nexport async function loadInitialMessages(messages, localeLoaders, options) {\n  const { defaultLocale, initialLocale, localeCodes, fallbackLocale, lazy } = options;\n  if (lazy && fallbackLocale) {\n    const fallbackLocales = makeFallbackLocaleCodes(fallbackLocale, [defaultLocale, initialLocale]);\n    await Promise.all(fallbackLocales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  }\n  const locales = lazy ? [...(/* @__PURE__ */ new Set()).add(defaultLocale).add(initialLocale)] : localeCodes;\n  await Promise.all(locales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  return messages;\n}\nasync function loadMessage(locale, { key, load }) {\n  let message = null;\n  try {\n    __DEBUG__ && console.log(\"loadMessage: (locale) -\", locale);\n    const getter = await load().then((r) => r.default || r);\n    if (isFunction(getter)) {\n      message = await getter(locale);\n      __DEBUG__ && console.log(\"loadMessage: dynamic load\", message);\n    } else {\n      message = getter;\n      if (message != null && cacheMessages) {\n        cacheMessages.set(key, message);\n      }\n      __DEBUG__ && console.log(\"loadMessage: load\", message);\n    }\n  } catch (e) {\n    console.error(\"Failed locale loading: \" + e.message);\n  }\n  return message;\n}\nexport async function loadLocale(locale, localeLoaders, setter) {\n  const loaders = localeLoaders[locale];\n  if (loaders == null) {\n    console.warn(\"Could not find messages for locale code: \" + locale);\n    return;\n  }\n  const targetMessage = {};\n  for (const loader of loaders) {\n    let message = null;\n    if (cacheMessages && cacheMessages.has(loader.key) && loader.cache) {\n      __DEBUG__ && console.log(loader.key + \" is already loaded\");\n      message = cacheMessages.get(loader.key);\n    } else {\n      __DEBUG__ && !loader.cache && console.log(loader.key + \" bypassing cache!\");\n      __DEBUG__ && console.log(loader.key + \" is loading ...\");\n      message = await loadMessage(locale, loader);\n    }\n    if (message != null) {\n      deepCopy(message, targetMessage);\n    }\n  }\n  setter(locale, targetMessage);\n}\nexport async function loadAndSetLocaleMessages(locale, localeLoaders, messages) {\n  const setter = (locale2, message) => {\n    const base = messages[locale2] || {};\n    deepCopy(message, base);\n    messages[locale2] = base;\n  };\n  await loadLocale(locale, localeLoaders, setter);\n}\n",
      "start": 1713208777144,
      "end": 1713208777931,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1713208777931,
      "end": 1713208777931,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1713208777931,
      "end": 1713208777931,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1713208777931,
      "end": 1713208777931,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1713208777931,
      "end": 1713208777931,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1713208777931,
      "end": 1713208777931,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1713208777931,
      "end": 1713208777931,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1713208777931,
      "end": 1713208777931,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1713208777931,
      "end": 1713208777931,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1713208777932,
      "end": 1713208777932,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1713208777933,
      "end": 1713208777933,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1713208777933,
      "end": 1713208777933,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1713208777933,
      "end": 1713208777933,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1713208777933,
      "end": 1713208777933,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1713208777933,
      "end": 1713208777933,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1713208777933,
      "end": 1713208777933,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1713208777933,
      "end": 1713208777933,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713208777933,
      "end": 1713208777933,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713208777933,
      "end": 1713208777933,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1713208777933,
      "end": 1713208777933,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1713208777933,
      "end": 1713208777933,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1713208777933,
      "end": 1713208777933,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713208777933,
      "end": 1713208777933,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1713208777933,
      "end": 1713208777934,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { deepCopy, isFunction, isArray, isObject, isString } from \"@intlify/shared\";\nconst cacheMessages = /* @__PURE__ */ new Map();\nexport async function loadVueI18nOptions(vueI18nConfigs, nuxt) {\n  const vueI18nOptions = { messages: {} };\n  for (const configFile of vueI18nConfigs) {\n    const { default: resolver } = await configFile();\n    const resolved = typeof resolver === \"function\" ? await nuxt.runWithContext(async () => await resolver()) : resolver;\n    deepCopy(resolved, vueI18nOptions);\n  }\n  return vueI18nOptions;\n}\nexport function makeFallbackLocaleCodes(fallback, locales) {\n  let fallbackLocales = [];\n  if (isArray(fallback)) {\n    fallbackLocales = fallback;\n  } else if (isObject(fallback)) {\n    const targets = [...locales, \"default\"];\n    for (const locale of targets) {\n      if (fallback[locale]) {\n        fallbackLocales = [...fallbackLocales, ...fallback[locale].filter(Boolean)];\n      }\n    }\n  } else if (isString(fallback) && locales.every((locale) => locale !== fallback)) {\n    fallbackLocales.push(fallback);\n  }\n  return fallbackLocales;\n}\nexport async function loadInitialMessages(messages, localeLoaders, options) {\n  const { defaultLocale, initialLocale, localeCodes, fallbackLocale, lazy } = options;\n  if (lazy && fallbackLocale) {\n    const fallbackLocales = makeFallbackLocaleCodes(fallbackLocale, [defaultLocale, initialLocale]);\n    await Promise.all(fallbackLocales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  }\n  const locales = lazy ? [...(/* @__PURE__ */ new Set()).add(defaultLocale).add(initialLocale)] : localeCodes;\n  await Promise.all(locales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  return messages;\n}\nasync function loadMessage(locale, { key, load }) {\n  let message = null;\n  try {\n    const getter = await load().then((r) => r.default || r);\n    if (isFunction(getter)) {\n      message = await getter(locale);\n    } else {\n      message = getter;\n      if (message != null && cacheMessages) {\n        cacheMessages.set(key, message);\n      }\n    }\n  } catch (e) {\n    console.error(\"Failed locale loading: \" + e.message);\n  }\n  return message;\n}\nexport async function loadLocale(locale, localeLoaders, setter) {\n  const loaders = localeLoaders[locale];\n  if (loaders == null) {\n    console.warn(\"Could not find messages for locale code: \" + locale);\n    return;\n  }\n  const targetMessage = {};\n  for (const loader of loaders) {\n    let message = null;\n    if (cacheMessages && cacheMessages.has(loader.key) && loader.cache) {\n      message = cacheMessages.get(loader.key);\n    } else {\n      message = await loadMessage(locale, loader);\n    }\n    if (message != null) {\n      deepCopy(message, targetMessage);\n    }\n  }\n  setter(locale, targetMessage);\n}\nexport async function loadAndSetLocaleMessages(locale, localeLoaders, messages) {\n  const setter = (locale2, message) => {\n    const base = messages[locale2] || {};\n    deepCopy(message, base);\n    messages[locale2] = base;\n  };\n  await loadLocale(locale, localeLoaders, setter);\n}\n",
      "start": 1713208777934,
      "end": 1713208777970,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"/home/yalnguembu/Perso/quonte/node_modules/@nuxtjs/i18n/dist/runtime/messages.mjs\"],\n  \"sourcesContent\": [\"import { deepCopy, isFunction, isArray, isObject, isString } from \\\"@intlify/shared\\\";\\nconst cacheMessages = /* @__PURE__ */ new Map();\\nexport async function loadVueI18nOptions(vueI18nConfigs, nuxt) {\\n  const vueI18nOptions = { messages: {} };\\n  for (const configFile of vueI18nConfigs) {\\n    const { default: resolver } = await configFile();\\n    const resolved = typeof resolver === \\\"function\\\" ? await nuxt.runWithContext(async () => await resolver()) : resolver;\\n    deepCopy(resolved, vueI18nOptions);\\n  }\\n  return vueI18nOptions;\\n}\\nexport function makeFallbackLocaleCodes(fallback, locales) {\\n  let fallbackLocales = [];\\n  if (isArray(fallback)) {\\n    fallbackLocales = fallback;\\n  } else if (isObject(fallback)) {\\n    const targets = [...locales, \\\"default\\\"];\\n    for (const locale of targets) {\\n      if (fallback[locale]) {\\n        fallbackLocales = [...fallbackLocales, ...fallback[locale].filter(Boolean)];\\n      }\\n    }\\n  } else if (isString(fallback) && locales.every((locale) => locale !== fallback)) {\\n    fallbackLocales.push(fallback);\\n  }\\n  return fallbackLocales;\\n}\\nexport async function loadInitialMessages(messages, localeLoaders, options) {\\n  const { defaultLocale, initialLocale, localeCodes, fallbackLocale, lazy } = options;\\n  if (lazy && fallbackLocale) {\\n    const fallbackLocales = makeFallbackLocaleCodes(fallbackLocale, [defaultLocale, initialLocale]);\\n    await Promise.all(fallbackLocales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\\n  }\\n  const locales = lazy ? [...(/* @__PURE__ */ new Set()).add(defaultLocale).add(initialLocale)] : localeCodes;\\n  await Promise.all(locales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\\n  return messages;\\n}\\nasync function loadMessage(locale, { key, load }) {\\n  let message = null;\\n  try {\\n    __DEBUG__ && console.log(\\\"loadMessage: (locale) -\\\", locale);\\n    const getter = await load().then((r) => r.default || r);\\n    if (isFunction(getter)) {\\n      message = await getter(locale);\\n      __DEBUG__ && console.log(\\\"loadMessage: dynamic load\\\", message);\\n    } else {\\n      message = getter;\\n      if (message != null && cacheMessages) {\\n        cacheMessages.set(key, message);\\n      }\\n      __DEBUG__ && console.log(\\\"loadMessage: load\\\", message);\\n    }\\n  } catch (e) {\\n    console.error(\\\"Failed locale loading: \\\" + e.message);\\n  }\\n  return message;\\n}\\nexport async function loadLocale(locale, localeLoaders, setter) {\\n  const loaders = localeLoaders[locale];\\n  if (loaders == null) {\\n    console.warn(\\\"Could not find messages for locale code: \\\" + locale);\\n    return;\\n  }\\n  const targetMessage = {};\\n  for (const loader of loaders) {\\n    let message = null;\\n    if (cacheMessages && cacheMessages.has(loader.key) && loader.cache) {\\n      __DEBUG__ && console.log(loader.key + \\\" is already loaded\\\");\\n      message = cacheMessages.get(loader.key);\\n    } else {\\n      __DEBUG__ && !loader.cache && console.log(loader.key + \\\" bypassing cache!\\\");\\n      __DEBUG__ && console.log(loader.key + \\\" is loading ...\\\");\\n      message = await loadMessage(locale, loader);\\n    }\\n    if (message != null) {\\n      deepCopy(message, targetMessage);\\n    }\\n  }\\n  setter(locale, targetMessage);\\n}\\nexport async function loadAndSetLocaleMessages(locale, localeLoaders, messages) {\\n  const setter = (locale2, message) => {\\n    const base = messages[locale2] || {};\\n    deepCopy(message, base);\\n    messages[locale2] = base;\\n  };\\n  await loadLocale(locale, localeLoaders, setter);\\n}\\n\"],\n  \"mappings\": \"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\",\n  \"names\": []\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1713208777971,
      "end": 1713208777971,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1713208777971,
      "end": 1713208777971,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1713208777971,
      "end": 1713208777971,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1713208777971,
      "end": 1713208777971,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1713208777971,
      "end": 1713208777971,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1713208777971,
      "end": 1713208777971,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1713208777971,
      "end": 1713208777971,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1713208777971,
      "end": 1713208777974,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1713208777971,
      "end": 1713208777974,
      "order": "post"
    },
    {
      "name": "unhead:remove-server-composables",
      "start": 1713208777974,
      "end": 1713208777974,
      "order": "post"
    },
    {
      "name": "unhead:use-seo-meta-transform",
      "start": 1713208777974,
      "end": 1713208777974,
      "order": "post"
    },
    {
      "name": "unhead:use-seo-meta-transform",
      "start": 1713208777974,
      "end": 1713208777974,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1713208777974,
      "end": 1713208777974,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1713208777974,
      "end": 1713208777974,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1713208777974,
      "end": 1713208777974,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1713208777974,
      "end": 1713208777974,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1713208777974,
      "end": 1713208777974,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1713208777974,
      "end": 1713208777975,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1713208777977,
      "end": 1713208777977,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1713208777977,
      "end": 1713208777978,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1713208777979,
      "end": 1713208777979,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1713208777979,
      "end": 1713208777979,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1713208777979,
      "end": 1713208777979,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1713208777979,
      "end": 1713208777979,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1713208777980,
      "end": 1713208777980,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1713208777980,
      "end": 1713208777980,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1713208777980,
      "end": 1713208777980,
      "order": "normal"
    }
  ]
}
