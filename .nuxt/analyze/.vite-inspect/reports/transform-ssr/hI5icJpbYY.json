{
  "resolvedId": "/home/yalnguembu/Perso/quonte/services/services/TagService.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/* generated using openapi-typescript-codegen -- do not edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { TagDTO } from '../models/TagDTO';\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport { OpenAPI } from '../core/OpenAPI';\nimport { request as __request } from '../core/request';\nexport class TagService {\n    /**\n     * fetch all tags\n     * fetch all tags\n     * @returns TagDTO tags successfull fecthed\n     * @throws ApiError\n     */\n    public static getAllTags(): CancelablePromise<Array<TagDTO>> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/tags/',\n            errors: {\n                403: `access forbidden`,\n            },\n        });\n    }\n    /**\n     * create new tag\n     * create new tag\n     * @returns TagDTO tag created successfully\n     * @throws ApiError\n     */\n    public static createTag({\n        requestBody,\n    }: {\n        /**\n         * tag informations needed to create new tag\n         */\n        requestBody: TagDTO,\n    }): CancelablePromise<TagDTO> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/tags/',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                403: `access forbidden`,\n            },\n        });\n    }\n    /**\n     * fetch all tags\n     * fetch all by id\n     * @returns TagDTO notes successfull fecthed\n     * @throws ApiError\n     */\n    public static getTagById({\n        id,\n    }: {\n        /**\n         * the tag's id to get\n         */\n        id: string,\n    }): CancelablePromise<TagDTO> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/tags/{id}',\n            path: {\n                'id': id,\n            },\n            errors: {\n                403: `access forbidden`,\n            },\n        });\n    }\n    /**\n     * fetch tags by ownerId\n     * fetch tags by ownerId\n     * @returns TagDTO tags successfull fecthed\n     * @throws ApiError\n     */\n    public static getTagsByOwnerId({\n        id,\n    }: {\n        /**\n         * the tag's owner id\n         */\n        id: string,\n    }): CancelablePromise<Array<TagDTO>> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/users/{id}/tags',\n            path: {\n                'id': id,\n            },\n            errors: {\n                403: `access forbidden`,\n            },\n        });\n    }\n}\n",
      "start": 1713208780134,
      "end": 1713208780208,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1713208780208,
      "end": 1713208780208,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1713208780208,
      "end": 1713208780208,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1713208780208,
      "end": 1713208780208,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1713208780208,
      "end": 1713208780208,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1713208780208,
      "end": 1713208780208,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1713208780208,
      "end": 1713208780208,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1713208780208,
      "end": 1713208780208,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1713208780208,
      "end": 1713208780208,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1713208780208,
      "end": 1713208780208,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1713208780208,
      "end": 1713208780208,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1713208780208,
      "end": 1713208780208,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { OpenAPI } from \"../core/OpenAPI\";\nimport { request as __request } from \"../core/request\";\nexport class TagService {\n  /**\n   * fetch all tags\n   * fetch all tags\n   * @returns TagDTO tags successfull fecthed\n   * @throws ApiError\n   */\n  static getAllTags() {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/tags/\",\n      errors: {\n        403: `access forbidden`\n      }\n    });\n  }\n  /**\n   * create new tag\n   * create new tag\n   * @returns TagDTO tag created successfully\n   * @throws ApiError\n   */\n  static createTag({\n    requestBody\n  }) {\n    return __request(OpenAPI, {\n      method: \"POST\",\n      url: \"/tags/\",\n      body: requestBody,\n      mediaType: \"application/json\",\n      errors: {\n        403: `access forbidden`\n      }\n    });\n  }\n  /**\n   * fetch all tags\n   * fetch all by id\n   * @returns TagDTO notes successfull fecthed\n   * @throws ApiError\n   */\n  static getTagById({\n    id\n  }) {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/tags/{id}\",\n      path: {\n        \"id\": id\n      },\n      errors: {\n        403: `access forbidden`\n      }\n    });\n  }\n  /**\n   * fetch tags by ownerId\n   * fetch tags by ownerId\n   * @returns TagDTO tags successfull fecthed\n   * @throws ApiError\n   */\n  static getTagsByOwnerId({\n    id\n  }) {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/users/{id}/tags\",\n      path: {\n        \"id\": id\n      },\n      errors: {\n        403: `access forbidden`\n      }\n    });\n  }\n}\n",
      "start": 1713208780208,
      "end": 1713208780218,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/home/yalnguembu/Perso/quonte/services/services/TagService.ts"
        ],
        "sourcesContent": [
          "/* generated using openapi-typescript-codegen -- do not edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { TagDTO } from '../models/TagDTO';\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport { OpenAPI } from '../core/OpenAPI';\nimport { request as __request } from '../core/request';\nexport class TagService {\n    /**\n     * fetch all tags\n     * fetch all tags\n     * @returns TagDTO tags successfull fecthed\n     * @throws ApiError\n     */\n    public static getAllTags(): CancelablePromise<Array<TagDTO>> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/tags/',\n            errors: {\n                403: `access forbidden`,\n            },\n        });\n    }\n    /**\n     * create new tag\n     * create new tag\n     * @returns TagDTO tag created successfully\n     * @throws ApiError\n     */\n    public static createTag({\n        requestBody,\n    }: {\n        /**\n         * tag informations needed to create new tag\n         */\n        requestBody: TagDTO,\n    }): CancelablePromise<TagDTO> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/tags/',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                403: `access forbidden`,\n            },\n        });\n    }\n    /**\n     * fetch all tags\n     * fetch all by id\n     * @returns TagDTO notes successfull fecthed\n     * @throws ApiError\n     */\n    public static getTagById({\n        id,\n    }: {\n        /**\n         * the tag's id to get\n         */\n        id: string,\n    }): CancelablePromise<TagDTO> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/tags/{id}',\n            path: {\n                'id': id,\n            },\n            errors: {\n                403: `access forbidden`,\n            },\n        });\n    }\n    /**\n     * fetch tags by ownerId\n     * fetch tags by ownerId\n     * @returns TagDTO tags successfull fecthed\n     * @throws ApiError\n     */\n    public static getTagsByOwnerId({\n        id,\n    }: {\n        /**\n         * the tag's owner id\n         */\n        id: string,\n    }): CancelablePromise<Array<TagDTO>> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/users/{id}/tags',\n            path: {\n                'id': id,\n            },\n            errors: {\n                403: `access forbidden`,\n            },\n        });\n    }\n}\n"
        ],
        "mappings": "AAMA,SAAS,eAAe;AACxB,SAAS,WAAW,iBAAiB;AAC9B,aAAM,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpB,OAAc,aAA+C;AACzD,WAAO,UAAU,SAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,QAAQ;AAAA,QACJ,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAc,UAAU;AAAA,IACpB;AAAA,EACJ,GAK8B;AAC1B,WAAO,UAAU,SAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,MACN,WAAW;AAAA,MACX,QAAQ;AAAA,QACJ,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAc,WAAW;AAAA,IACrB;AAAA,EACJ,GAK8B;AAC1B,WAAO,UAAU,SAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,MAAM;AAAA,MACV;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAc,iBAAiB;AAAA,IAC3B;AAAA,EACJ,GAKqC;AACjC,WAAO,UAAU,SAAS;AAAA,MACtB,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,MAAM;AAAA,QACF,MAAM;AAAA,MACV;AAAA,MACA,QAAQ;AAAA,QACJ,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1713208780218,
      "end": 1713208780218,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1713208780218,
      "end": 1713208780218,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1713208780218,
      "end": 1713208780218,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1713208780218,
      "end": 1713208780218,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713208780218,
      "end": 1713208780218,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713208780218,
      "end": 1713208780218,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1713208780218,
      "end": 1713208780218,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1713208780218,
      "end": 1713208780218,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1713208780219,
      "end": 1713208780219,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713208780219,
      "end": 1713208780219,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1713208780219,
      "end": 1713208780219,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "post"
    },
    {
      "name": "unhead:remove-server-composables",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "post"
    },
    {
      "name": "unhead:use-seo-meta-transform",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "post"
    },
    {
      "name": "unhead:use-seo-meta-transform",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1713208780220,
      "end": 1713208780220,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1713208780221,
      "end": 1713208780223,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1713208780221,
      "end": 1713208780223,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1713208780223,
      "end": 1713208780223,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1713208780223,
      "end": 1713208780223,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1713208780223,
      "end": 1713208780223,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1713208780223,
      "end": 1713208780223,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1713208780224,
      "end": 1713208780224,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1713208780224,
      "end": 1713208780224,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1713208780224,
      "end": 1713208780224,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1713208780224,
      "end": 1713208780224,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1713208780224,
      "end": 1713208780224,
      "order": "normal"
    }
  ]
}
