{
  "resolvedId": "/home/yalnguembu/Perso/quonte/node_modules/axios/lib/helpers/toFormData.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\nimport PlatformFormData from '../platform/node/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (PlatformFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n",
      "start": 1713208772519,
      "end": 1713208772561,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "pre"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1713208772561,
      "end": 1713208772561,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1713208772561,
      "end": 1713208772563,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "post"
    },
    {
      "name": "unhead:use-seo-meta-transform",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1713208772563,
      "end": 1713208772563,
      "order": "normal"
    }
  ]
}
